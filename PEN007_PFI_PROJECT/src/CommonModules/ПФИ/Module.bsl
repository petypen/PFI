//////////////////////////////////////////////////////////////////////////////////
// Оригинальная идея и исходная реализация 
// Котов Дмитрий Вадимович - https://github.com/KotovDima1C
// Динамическое Формирование Интерфейса - https://github.com/KotovDima1C/DFI
// Лицензия: GNU Lesser General Public License v2.1
// Статья на Инфостарт: https://infostart.ru/1c/articles/1284403/
// 
// Дмитрий, спасибо!
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
// Адаптация под EDT, переосмысление и документирование:
// @petypen - Плешивцев Евгений
// Лицензия: GNU Lesser General Public License v2.1
//////////////////////////////////////////////////////////////////////////////////


//@strict-types
//@skip-check method-too-many-params
#Область Создать_реквизиты_и_команды

// Создание реквизита
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создается реквизит
//  ИмяРеквизита - Строка - Имя реквизита
//	ОписаниеТипа - ОписаниеТипов - Описание типа реквизита
//
Процедура СоздатьРеквизит(Форма, ИмяРеквизита, ОписаниеТипа) Экспорт

	стРеквизит = Новый Структура;
	стРеквизит.Вставить(ИмяРеквизита, ОписаниеТипа);
	СоздатьРеквизиты(Форма, стРеквизит);

КонецПроцедуры

// Создание реквизитов
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создаются реквизиты
//  стРеквизиты - Структура - Описание реквизитов. Где:
//    Ключ - Строка - Имя реквизита
//    Значение - ОписаниеТипов - описание типа реквизита
//
Процедура СоздатьРеквизиты(Форма, стРеквизиты) Экспорт

	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого элементСтруктуры Из стРеквизиты Цикл
		НовыйРеквизит = Новый РеквизитФормы(элементСтруктуры.Ключ, элементСтруктуры.Значение);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

КонецПроцедуры

// Создать реквизиты таблицы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создаются реквизиты
//  ИмяРеквизитаТаблица - Строка - Имя реквизита с типом "Таблица значений" в котором будут созданы реквизиты таблицы (колонки)
//  стРеквизиты - Структура - Описания реквизитов таблицы, где:
//    Ключ - Строка - Имя реквизита таблицы (имя колонки)
//    Значение - ОписаниеТипов - Описание типа реквизита таблицы
Процедура СоздатьРеквизитыТаблицы(Форма, ИмяРеквизитаТаблица, стРеквизиты) Экспорт

	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого элементСтруктуры Из стРеквизиты Цикл
		НовыйРеквизит = Новый РеквизитФормы(элементСтруктуры.Ключ, элементСтруктуры.Значение, ИмяРеквизитаТаблица);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

КонецПроцедуры

// Создание команды
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создается команда
//	ИмяКоманды - Строка - Имя добавляемой команды
//  Заголовок - Строка - Отображаемый текст команды
//  ИмяДействия - Строка - Имя процедуры обработчика команды
//		Оформление процедуры обработчика команды:
//		Процедура <ИмяДействия>(Команда)
//
Процедура СоздатьКоманду(Форма, ИмяКоманды, Заголовок, ИмяДействия) Экспорт

	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Заголовок = Заголовок;
	НоваяКоманда.Действие = ИмяДействия;

КонецПроцедуры

#КонецОбласти

#Область Создание_элементов

// Создать обычную группу
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//	ИмяГруппы - Строка - Имя нового элемента на форме
//	РодительГруппы - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для новой группы
//	Заголовок - Строка - Отображаемый заголовок группы
//	ГруппировкаВГруппе - Число - Принимаемые значения:
//		1 - группировка вертикальная
//		2 - группировка горизонтальная всегда
//		3 - группировка горизонтальная, если возможно
//	РастягиватьГоризонтально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	РастягиватьВертикально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//  	Ключ - Строка - наименование свойства
//  	Значение - Произвольный - значение свойства
//	ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//	 которым требуется вставить новую группу
//
//Возвращаемое значение:
//	ГруппаФормы - Новая группа формы
Функция ГруппаОбычная(Форма, ИмяГруппы, РодительГруппы, Заголовок = "", ГруппировкаВГруппе = 0,
	РастягиватьГоризонтально = 0, РастягиватьВертикально = 0, стСвойстваЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред); // РасширениеГруппыФормыДляОбычнойГруппы -
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НовыйЭлемент.ОтображатьЗаголовок = Истина;

	УстановитьСостояниеГруппировкиВЭлементе(НовыйЭлемент, ГруппировкаВГруппе);
	УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
	УстановитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать обычную группу без отображения.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которй создается элемент
//  ИмяГруппы - Строка - Имя нового элемента на форме
//  РодительГруппы - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения -Родительский элемент для новой группы
//	ГруппировкаВГруппе - Число - Принимаемые значения:
//		1 - группировка вертикальная
//		2 - группировка горизонтальная всегда
//		3 - группировка горизонтальная, если возможно
//	РастягиватьГоризонтально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	РастягиватьВертикально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//  	Ключ - Строка - наименование свойства
//  	Значение - Произвольный - значение свойства
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую группу
// 
// Возвращаемое значение:
//  ГруппаФормы - Новая группа формы.
Функция ГруппаОбычнаяБезОтображения(Форма, ИмяГруппы, РодительГруппы, ГруппировкаВГруппе = 0,
	РастягиватьГоризонтально = 0, РастягиватьВертикально = 0, стСвойстваЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред); // РасширениеГруппыФормыДляОбычнойГруппы -
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;

	УстановитьСостояниеГруппировкиВЭлементе(НовыйЭлемент, ГруппировкаВГруппе);
	УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
	УстановитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать группу - Командная панель
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПанели - Строка - Имя нового элемента на форме
//  РодительПанели - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для новой командной панели
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую панель
// 
// Возвращаемое значение:
//  ГруппаФормы - Группа формы вида командная панель
Функция ГруппаКоманднаяПанель(Форма, ИмяПанели, РодительПанели, стСвойстваЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяПанели, Тип("ГруппаФормы"), РодительПанели, ЭлементПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать группу страниц
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//	ИмяГруппы - Строка - Имя нового элемента на форме
//	РодительГруппы - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для новой группы
//	РастягиватьГоризонтально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	РастягиватьВертикально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//		Ключ - Строка - наименование свойства
//		Значение - Произвольный - значение свойства
//	ЭлементПеред- ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//	 которым требуется вставить новую группу
//
// Возвращаемое значение:
//	ГруппаФормы - Новая группа формы
Функция ГруппаСтраниц(Форма, ИмяГруппы, РодительГруппы, РастягиватьГоризонтально = 0, РастягиватьВертикально = 0,
	стСвойстваЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред); // РасширениеГруппыФормыДляСтраниц -
	НовыйЭлемент.Вид = ВидГруппыФормы.Страницы;

	УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
	УстановитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать страницу для группы страниц
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//	ИмяСтраницы - Строка - Имя нового элемента на форме
//	ГруппаСтраниц - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент типа ГруппаСтраниц для новой Страницы
//	Заголовок - Строка - Отображаемый заголовок страницы
//	ГруппировкаВГруппе - Число - Принимаемые значения:
//		1 - группировка вертикальная
//		2 - группировка горизонтальная всегда
//		3 - группировка горизонтальная, если возможно
//	РастягиватьГоризонтально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	РастягиватьВертикально - Число - Принимаемые значения:
//		1 - растягивать
//		2 - не растягивать
//		0 - авто
//	стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//		Ключ - Строка - наименование свойства
//		Значение - Произвольный - значение свойства
//	СтраницаПеред - ГруппаФормы, Неопределено - Элемент перед которым требуется вставить новую страницу
// Возвращаемое значение:
//  ГруппаФормы - Новая страница формы
Функция СтраницаГруппыСтраниц(Форма, ИмяСтраницы, ГруппаСтраниц, Заголовок = "", ГруппировкаВГруппе = 0,
	РастягиватьГоризонтально = 0, РастягиватьВертикально = 0, стСвойстваЭлемента = Неопределено,
	СтраницаПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяСтраницы, Тип("ГруппаФормы"), ГруппаСтраниц, СтраницаПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;

	УстановитьСостояниеГруппировкиВЭлементе(НовыйЭлемент, ГруппировкаВГруппе);
	УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
	УстановитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Поле
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПоля - Строка - Имя нового элемента на форме
//  РодительПоля - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  Заголовок - Строка - Заголовок нового поля, как он будет отображаться пользователю
//  ШифрВидаПоля - Число - Вид поля. Можно указать следующие значения:
//    1 - ПолеВвода
//    2 - ПолеФлажка
//    3 - ПолеИндикатора
//    4 - ПолеПереключателя
//    5 - ПолеПериода
//    6 - ПолеHTMLДокумента
//    0 - Без указания типа, тип можно передать в структуре свойств
//  ПутьКДанным - Строка - Путь к данным значения поля
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новое поле
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляВвода, РасширениеПоляФормыДляПоляПереключателя - Новое поле формы
Функция Поле(Форма, ИмяПоля, РодительПоля, Заголовок, ШифрВидаПоля = 0, ПутьКДанным = "",
	стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяПоля, Тип("ПолеФормы"), РодительПоля, ЭлементПеред);

	Если ШифрВидаПоля = 1 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	ИначеЕсли ШифрВидаПоля = 2 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	ИначеЕсли ШифрВидаПоля = 3 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеИндикатора;
	ИначеЕсли ШифрВидаПоля = 4 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	ИначеЕсли ШифрВидаПоля = 5 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеПериода;
	ИначеЕсли ШифрВидаПоля = 6 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	КонецЕсли;

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	Если ПутьКДанным <> "" Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(НовыйЭлемент, стСобытияЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Поле надпись
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПоля - Строка - Имя нового элемента на форме
//  РодительПоля - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  Заголовок - Строка - Заголовок нового поля, как он будет отображаться пользователю
//  БезЗаголовка - Булево - Если истина, то заголовок не выводится. По умолчанию заголовок не выводится.
//  ПутьКДанным - Строка - Путь к данным значения поля
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новое поле
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляНадписи - Новое поле формы
Функция ПолеНадписи(Форма, ИмяПоля, РодительПоля, Заголовок = "", БезЗаголовка = Истина, ПутьКДанным = "",
	стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяПоля, Тип("ПолеФормы"), РодительПоля, ЭлементПеред);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;

	Если БезЗаголовка Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ПутьКДанным <> "" Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(НовыйЭлемент, стСобытияЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Поле гиперссылки
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПоля - Строка - Имя нового элемента на форме
//  РодительПоля - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  Заголовок - Строка - Заголовок нового поля, как он будет отображаться пользователю
//  БезЗаголовка - Булево - Если истина, то заголовок не выводится. По умолчанию заголовок не выводится.
//  ПутьКДанным - Строка - Путь к данным значения поля
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новое поле
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляНадписи - Новое поле формы
Функция ПолеГиперссылка(Форма, ИмяПоля, РодительПоля, Заголовок = "", БезЗаголовка = Истина, ПутьКДанным = "",
	стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяПоля, Тип("ПолеФормы"), РодительПоля, ЭлементПеред); // РасширениеПоляФормыДляПоляНадписи - 
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Гиперссылка = Истина;

	Если БезЗаголовка Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ПутьКДанным <> "" Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(НовыйЭлемент, стСобытияЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Поле флажок
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПоля - Строка - Имя нового элемента на форме
//  РодительПоля - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  Заголовок - Строка - Заголовок нового поля
//  тВидФлажка - Число - Вид флажка. Можно указать следующие значения:
//    0 - Авто
//    1 - Флажок
//    2 - Тумблер
//    3 - Выключатель
//  ПутьКДанным - Строка - Путь к данным значения поля
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новое поле
// 
// Возвращаемое значение:
//  ПолеФормы - Новое поле формы
Функция ПолеФлажок(Форма, ИмяПоля, РодительПоля, Заголовок, тВидФлажка = 0, ПутьКДанным = "",
	стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	НовыйЭлемент = Поле(Форма, ИмяПоля, РодительПоля, Заголовок, 2, ПутьКДанным, стСвойстваЭлемента, стСобытияЭлемента,
		ЭлементПеред); // РасширениеПоляФормыДляПоляФлажка -

	Если тВидФлажка = 1 Тогда
		НовыйЭлемент.ВидФлажка = ВидФлажка.Флажок;
	ИначеЕсли тВидФлажка = 2 Тогда
		НовыйЭлемент.ВидФлажка = ВидФлажка.Тумблер;
	ИначеЕсли тВидФлажка = 3 Тогда
		НовыйЭлемент.ВидФлажка = ВидФлажка.Выключатель;
	Иначе
		НовыйЭлемент.ВидФлажка = ВидФлажка.Авто;
	КонецЕсли;

	Возврат НовыйЭлемент;
КонецФункции

// Создать Поле вида Выпадающий список.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяСписка - Строка - Имя нового элемента на форме
//  РодительСписка - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  Заголовок - Строка - Отображаемый заголовок поля формы
//  ЗначенияВыбора - Массив из Строка- значения выбора для поля Выпадающий список
//  РедактированиеТекста - Булево - Редактирование текста, если ЛОЖЬ, то редактирование запрещено 
//  и можно выбирать значения только из списка
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляВвода - Поле Выпадающий список
Функция ПолеВыпадающийСписок(Форма, ИмяСписка, РодительСписка, Заголовок = "", ЗначенияВыбора,
	РедактированиеТекста = Ложь, стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	СоздатьРеквизит(Форма, ИмяСписка, ОписаниеТипаСтрока(100));
	НовыйЭлемент = Поле(Форма, ИмяСписка, РодительСписка, Заголовок, 1, ИмяСписка, стСвойстваЭлемента,
		стСобытияЭлемента, ЭлементПеред);
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;

	Для Каждого элементМассива Из ЗначенияВыбора Цикл
		НовыйЭлемент.СписокВыбора.Добавить(элементМассива); // @skip-check invocation-parameter-type-intersect
	КонецЦикла;

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	НовыйЭлемент.РедактированиеТекста = РедактированиеТекста;

	Возврат НовыйЭлемент;
КонецФункции

// Создать поле вида Переключатель
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяПереключателя - Строка - Имя нового элемента на форме
//  РодительЭлемента - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  Заголовок - Строка - Отображаемый заголовок поля формы
//  ЗначенияПереключателя - Массив из Строка - значений для поля Переключатель. Номер в массиве соответствует номеру
//   в переключателе.
//  КодВидаПереключателя - Число - Вид переключателя. Допустимые значения:
//    1 - Переключатель
//    2 - Тумблер
//    0 - Авто
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ПолеФормы, РасширениеПоляФормыДляПоляПереключателя - Поле Переключатель
Функция ПолеПереключатель(Форма, ИмяПереключателя, РодительЭлемента, Заголовок = "", ЗначенияПереключателя,
	КодВидаПереключателя, стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	СоздатьРеквизит(Форма, ИмяПереключателя, ОписаниеТипаЧисло(10, 0));
	НовыйЭлемент = Поле(Форма, ИмяПереключателя, РодительЭлемента, Заголовок, 4, ИмяПереключателя, стСвойстваЭлемента,
		стСобытияЭлемента, ЭлементПеред);

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Если КодВидаПереключателя = 1 Тогда
		НовыйЭлемент.ВидПереключателя = ВидПереключателя.Переключатель;
	ИначеЕсли КодВидаПереключателя = 2 Тогда
		НовыйЭлемент.ВидПереключателя = ВидПереключателя.Тумблер;
	Иначе
		НовыйЭлемент.ВидПереключателя = ВидПереключателя.Авто;
	КонецЕсли;

	Счетчик = 0;
	Для Каждого текЭлемент Из ЗначенияПереключателя Цикл
		НовыйЭлемент.СписокВыбора.Добавить(Счетчик, текЭлемент); // @skip-check invocation-parameter-type-intersect
		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат НовыйЭлемент;
КонецФункции

// Элемент Декорация
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяДекорации - Строка - Имя нового элемента на форме
//  РодительДекорации - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую декорацию
// 
// Возвращаемое значение:
//  ДекорацияФормы - Новая декорация формы
Функция Декорация(Форма, ИмяДекорации, РодительДекорации, стСвойстваЭлемента = Неопределено,
	стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяДекорации, Тип("ДекорацияФормы"), РодительДекорации, ЭлементПеред);

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(НовыйЭлемент, стСобытияЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Декорацию - Надпись
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяДекорации - Строка - Имя нового элемента на форме
//  РодительДекорации - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  Заголовок - Строка - Отображаемый текст декорации
//  РастягиватьПоГоризонтали - Булево - растянуть надпись декарации на всю ширину формы
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую декорацию
// 
// Возвращаемое значение:
//  ДекорацияФормы - Новая декорация формы
Функция ДекорацияНадпись(Форма, ИмяДекорации, РодительДекорации, Заголовок, РастягиватьПоГоризонтали = Истина,
	ЭлементПеред = Неопределено) Экспорт

	НовыйЭлемент = Декорация(Форма, ИмяДекорации, РодительДекорации, , , ЭлементПеред);

	НовыйЭлемент.Заголовок = Заголовок;

	Если РастягиватьПоГоризонтали Тогда
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;

	Возврат НовыйЭлемент;
КонецФункции

// Создать Декорацию - Картинку
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяДекорации - Строка - Имя нового элемента на форме
//  РодительДекорации - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового поля
//  ИмяКартинки - Строка - Имя картинки в дереве метаданных
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую декорацию
// 
// Возвращаемое значение:
//  ДекорацияФормы - Новая декорация формы
Функция ДекорацияКартинка(Форма, ИмяДекорации, РодительДекорации, ИмяКартинки, ЭлементПеред = Неопределено) Экспорт

	НовыйЭлемент = Декорация(Форма, ИмяДекорации, РодительДекорации, , , ЭлементПеред); // РасширениеДекорацииФормыДляКартинки - 

	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	Картинка = БиблиотекаКартинок[ИмяКартинки]; // Картинка -
	НовыйЭлемент.Картинка = Картинка;

	Возврат НовыйЭлемент;
КонецФункции

// Создать кнопку формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяКнопки - Строка - Имя нового элемента на форме
//  РодительКнопки - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  Заголовок - Строка - Отображаемый заголовок кнопки
//  ИмяКоманды - Строка - Имя команды кнопки
//  ВидКнопки - Число - Вид кнопки формы. Можно указать следующие значения:
//    1 - Обычная кнопка
//    2 - Гиперссылка
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новую декорацию
// 
// Возвращаемое значение:
//  КнопкаФормы - Новая кнопка формы
Функция Кнопка(Форма, ИмяКнопки, РодительКнопки, Заголовок = "", ИмяКоманды = "", ВидКнопки = 0,
	стСвойстваЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяКнопки, Тип("КнопкаФормы"), РодительКнопки, ЭлементПеред);

	Если ВидКнопки = 1 Тогда
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ИначеЕсли ВидКнопки = 2 Тогда
		НовыйЭлемент.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	Иначе
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КонецЕсли;

	Если Заголовок <> "" Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Если ИмяКоманды <> "" Тогда
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Таблицу формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяТаблицы - Строка - Имя нового элемента на форме
//  РодительТаблицы - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для новой таблицы
//  ПутьКДанным - Строка - Путь к данным таблицы
//  стКолонки - Структура - Колонки новой таблицы, где:
//    Ключ - Строка - Имя колонки таблицы
//    Значение - Строка - Заголовок колонки или "" для заголовка по умолчанию
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента, где:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  СвояКоманднаяПанель - Булево - используется если требуется снять флаг "Автозаполнение" и наполнить
//   командную панель таблицы самостоятельно. Из-за специфики работы, нет программной возможности снятия
//   флага "Автозаполнение", по этому создается новая пользовательская командная панель, а стандартная
//   скрывается полностью. Имя новой командной панели <ИмяСписка>+"КоманднаяПанель2"
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ТаблицаФормы - Новая таблица формы
Функция ТаблицаФормы(Форма, ИмяТаблицы, РодительТаблицы, ПутьКДанным, стКолонки, стСвойстваЭлемента = Неопределено,
	стСобытияЭлемента = Неопределено, СвояКоманднаяПанель = Ложь, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	Если СвояКоманднаяПанель Тогда
		ГруппаДинамическогоСписка = ГруппаОбычнаяБезОтображения(Форма, "ДополнительнаяГруппаКоманднаяПанель"
			+ ИмяТаблицы, РодительТаблицы, 1, 1, 1, , ЭлементПеред);
		ГруппаКоманднаяПанель(Форма, ИмяТаблицы + "КоманднаяПанель2", ГруппаДинамическогоСписка);
		ТаблицаФормы = СоздатьЭлементФормы(Форма, ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаДинамическогоСписка);
		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Иначе
		ТаблицаФормы = СоздатьЭлементФормы(Форма, ИмяТаблицы, Тип("ТаблицаФормы"), РодительТаблицы, ЭлементПеред);
	КонецЕсли;

	ТаблицаФормы.ПутьКДанным = ПутьКДанным;
	СоздатьКолонкиТаблицыФормы(Форма, ТаблицаФормы, стКолонки);

	УстановитьСвойстваЭлементу(ТаблицаФормы, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(ТаблицаФормы, стСобытияЭлемента);

	Возврат ТаблицаФормы;
КонецФункции

// Создать Колонку Таблицы / Динамического списка
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяКолонки - Строка - Имя новой колонки
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  ТипКолонки - Число - Тип колонки таблицы. Допустимые значения:
//    0 - Поле ввода
//    1 - Поле надписи
//    2 - Поле флажка
//    3 - Поле картинки
//  Заголовок - Строка - Отображаеиый заголовок колонки
//  ПутьКДанным - Строка - Путь к данным колонки
//  ОтображатьШапку - Булево - Отображать шапку колонки таблицы
//  ОтображатьПодвал - Булево - Отображать подвал колонки таблицы
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ПолеФормы - Колонка таблицы формы
Функция КолонкаТаблицыФормы(Форма, ИмяКолонки, Родитель, ТипКолонки = 0, Заголовок = "", ПутьКДанным,
	ОтображатьШапку = Истина, ОтображатьПодвал = Ложь, стСвойстваЭлемента = Неопределено,
	стСобытияЭлемента = Неопределено, ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);
	ЕслиСтруктураНеопределеноТоНовая(стСобытияЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяКолонки, Тип("ПолеФормы"), Родитель, ЭлементПеред);

	Если ТипКолонки = 1 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	ИначеЕсли ТипКолонки = 2 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	ИначеЕсли ТипКолонки = 3 Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	Иначе
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	КонецЕсли;

	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	НовыйЭлемент.ОтображатьВШапке = ОтображатьШапку;
	НовыйЭлемент.ОтображатьВПодвале = ОтображатьПодвал;

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);
	УстановитьСобытияЭлементу(НовыйЭлемент, стСобытияЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать Группу колонок
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяГруппы - Строка - Имя нового элемента на форме
//  РодительГруппы - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  ГруппировкаГруппы - Число - Способ группировки группы. Допустимые значения:
//    1 - Горизонтальная
//    2 - Вертикальная
//    3 - В ячейке
//    0 - Авто
//  РастягиватьГоризонтально - Число - Допустимые значения:
//    1 - Растягивать
//    2 - Не растягивать
//    0 - Авто
//  ОтображатьШапку - Булево - Отображать шапку группы колонок таблицы
//  Заголовок - Строка - Отображаемый заголовок группы колонок таблицы
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ГруппаФормы, РасширениеГруппыФормыДляГруппыКолонок - Группа колонок таблицы формы
Функция ГруппаКолонокТаблицыФормы(Форма, ИмяГруппы, РодительГруппы, ГруппировкаГруппы = 0,
	РастягиватьГоризонтально = 0, ОтображатьШапку = Ложь, Заголовок = "", стСвойстваЭлемента = Неопределено,
	ЭлементПеред = Неопределено) Экспорт

	ЕслиСтруктураНеопределеноТоНовая(стСвойстваЭлемента);

	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред); // РасширениеГруппыФормыДляГруппыКолонок - 
	НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
	НовыйЭлемент.ОтображатьВШапке = ОтображатьШапку;
	НовыйЭлемент.Заголовок = Заголовок;

	УстановитьСостояниеГруппировкиКолонкиЭлемента(НовыйЭлемент, ГруппировкаГруппы);
	УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);

	УстановитьСвойстваЭлементу(НовыйЭлемент, стСвойстваЭлемента);

	Возврат НовыйЭлемент;
КонецФункции

// Создать динамический список
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой создается элемент
//  ИмяСписка - Строка - Имя новой таблицы формы
//  РодительСписка - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родительский элемент для нового элемента
//  ТекстЗапроса - Строка - Текст запроса, данные по которому динамический список должен отобразить.
//   если не заполнен, то обязательно должен быть заполнен параметр ОсновнаяТаблица
//  стПараметрыЗапроса - Структура, Неопределено - Параметры запроса. Где:
//    Ключ - Строка - наименование параметра запроса
//    Значение - Произвольный - значение параметра зпроса
//  ОсновнаяТаблица - Строка - Имя таблицы, которая является главной в запросе.
//  стКолоноки - Структура, Неопределено - Колонки динамического списка, где:
//    Ключ - Строка - имя колонки динамического списка
//    Значение - Строка - заголовок колонки динамического списка или пустая строка. Для сложных случаев
//     лучше передать "неопределено" и впоспользоваться процедурой формирования колонок таблицы формы.
//     см. КолонкаТаблицыФормы
//  стСвойстваЭлемента - Структура, Неопределено - Свойства нового элемента:
//    Ключ - Строка - наименование свойства
//    Значение - Произвольный - значение свойства
//  стСобытияЭлемента - Структура, Неопределено - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
//  СвояКоманднаяПанель - Булево - используется если требуется снять флаг "Автозаполнение" и наполнить
//   командную панель таблицы самостоятельно. Из-за специфики работы, нет программной возможности снятия
//   флага "Автозаполнение", по этому создается новая пользовательская командная панель, а стандартная
//   скрывается полностью. Имя новой командной панели <ИмяСписка>+"КоманднаяПанель2"
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - Элемент перед
//   которым требуется вставить новый элемент
// 
// Возвращаемое значение:
//  ТаблицаФормы - Новый динамический список
Функция ДинамическийСписок(Форма, ИмяСписка = "Список", РодительСписка, ТекстЗапроса = "",
	стПараметрыЗапроса = Неопределено, ОсновнаяТаблица = "", стКолоноки = Неопределено,
	стСвойстваЭлемента = Неопределено, стСобытияЭлемента = Неопределено, СвояКоманднаяПанель = Ложь,
	ЭлементПеред = Неопределено) Экспорт

	СоздатьРеквизит(Форма, ИмяСписка, ОписаниеТипаДинамическийСписок());
	РеквизитДинамическийСписок = Форма[ИмяСписка]; // ДинамическийСписок - 
	Если ТекстЗапроса = "" Тогда
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = Ложь;
		РеквизитДинамическийСписок.ОсновнаяТаблица = ОсновнаяТаблица;
	Иначе
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
		Если ОсновнаяТаблица <> "" Тогда
			РеквизитДинамическийСписок.ОсновнаяТаблица = ОсновнаяТаблица;
		КонецЕсли;
	КонецЕсли;

	ЕслиСтруктураНеопределеноТоНовая(стПараметрыЗапроса);
	УстановитьПараметрыЗапросаДинамическогоСписка(РеквизитДинамическийСписок, стПараметрыЗапроса);

	ТаблицаФормы = ТаблицаФормы(Форма, ИмяСписка, РодительСписка, ИмяСписка, стКолоноки, стСвойстваЭлемента,
		стСобытияЭлемента, СвояКоманднаяПанель, ЭлементПеред);

	Возврат ТаблицаФормы;
КонецФункции

#КонецОбласти

#Область Удаление_элементов_и_реквизитов

// Удалить реквизит, который ранее создан программно
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма на которой удаляются реквизиты
//  ИмяРеквизита - Строка - Имя удаляемого реквизита
//   Важно! можно указывать только реквизит созданный программно
Процедура УдалитьРеквизит(Форма, ИмяРеквизита) Экспорт

	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
	УдалитьРеквизиты(Форма, МассивУдаляемыхРеквизитов);

КонецПроцедуры

// Удалить реквизиты, которые ранее созданны программно
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма на которой удаляются реквизиты
//  мУдаляемыеРеквизиты - Массив из Строка - Имена удаляемых реквизитов.
//   Важно! можно указывать только реквизиты созданные программно
Процедура УдалитьРеквизиты(Форма, мУдаляемыеРеквизиты) Экспорт

	Форма.ИзменитьРеквизиты( , мУдаляемыеРеквизиты);

КонецПроцедуры

// Удалить элемент, который ранее создан программно
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма на которой удаляются элементы
//  ИмяЭлемента - Строка - Имя удаляемого элемента
Процедура УдалитьЭлемент(Форма, ИмяЭлемента) Экспорт

	МассивУдаляемыхЭлементов = Новый Массив;
	МассивУдаляемыхЭлементов.Добавить(ИмяЭлемента);
	УдалитьЭлементы(Форма, МассивУдаляемыхЭлементов);

КонецПроцедуры

// Удалить элементы, которые ранее созданны программно
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма на которой удаляются реквизиты
//  мУдаляемыеЭлементы - Массив из Строка - Имена удаляемых элементов.
//   Важно! можно указывать только элементы созданные программно
Процедура УдалитьЭлементы(Форма, мУдаляемыеЭлементы) Экспорт

	Для Каждого элементМассива Из мУдаляемыеЭлементы Цикл
		Если Форма.Элементы.Найти(элементМассива) <> Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы[элементМассива]);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Удалить элемент и реквизит, которые ранее созданны программно
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма на которой удаляются элементы
//  ИмяРеквизитаЭлемента - Строка - Имя удаляемого элемента и реквизита на форме.
//   Важно! Имя реквизита и элемента формы должны совпадать
Процедура УдалитьРеквизитИЭлемент(Форма, ИмяРеквизитаЭлемента) Экспорт

	УдалитьРеквизит(Форма, ИмяРеквизитаЭлемента);
	УдалитьЭлемент(Форма, ИмяРеквизитаЭлемента);

КонецПроцедуры

#КонецОбласти

#Область Описания_типов

// Описание типа булево.
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа булево
Функция ОписаниеТипаБулево() Экспорт
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

// Описание типа ДатаВремя.
// 
// Параметры:
//  ДатаВремя - Строка - Части даты для квалификатора.
//  	Варианты: "ДатаВремя", "Дата", "Время"
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа дата время
Функция ОписаниеТипаДатаВремя(ДатаВремя = "ДатаВремя") Экспорт
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторДатаВремя(ДатаВремя));
КонецФункции

// Описание типа динамический список.
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа динамический список
Функция ОписаниеТипаДинамическийСписок() Экспорт

	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДинамическийСписок"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);

КонецФункции

// Описание типа документ.
// 
// Параметры:
//  ИмяДокумента - Строка - Как имя Документа в дереве объектов метаданных
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа документ
Функция ОписаниеТипаДокумент(ИмяДокумента) Экспорт
	Возврат Новый ОписаниеТипов("ДокументСсылка." + ИмяДокумента);
КонецФункции

// Описание типа справочник.
// 
// Параметры:
//  ИмяСправочника - Строка - Как имя Справочника в дереве объектов метаданных
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа справочник
Функция ОписаниеТипаСправочник(ИмяСправочника) Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
КонецФункции

// Описание типа перечисление.
// 
// Параметры:
//  ИмяПеречисления - Строка - Как имя Перечисления в дереве объектов метаданных
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа перечисление
Функция ОписаниеТипаПеречисление(ИмяПеречисления) Экспорт
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + ИмяПеречисления);
КонецФункции

// Описание типа строка.
// 
// Параметры:
//  ДлинаСтроки - Число - Длина строки
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа строка
Функция ОписаниеТипаСтрока(ДлинаСтроки = 0) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтрока(ДлинаСтроки));
КонецФункции

// Описание типа таблица значений.
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа таблица значений
Функция ОписаниеТипаТаблицаЗначений() Экспорт

	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);

КонецФункции

// Описание типа число.
// 
// Параметры:
//  ДлинаЧисла - Число - Общая длина числа
//  ТочностьЧисла - Число - Количество символов после запятой
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа число
Функция ОписаниеТипаЧисло(ДлинаЧисла = 15, ТочностьЧисла = 2) Экспорт
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисло(ДлинаЧисла, ТочностьЧисла));
КонецФункции

// Квалификатор дата время.
// 
// Параметры:
//  ДатаВремя - Строка - Части даты для квалификатора.
//  	Варианты: "ДатаВремя", "Дата", "Время"
// 
// Возвращаемое значение:
//  КвалификаторыДаты - Квалификатор дата время
Функция КвалификаторДатаВремя(ДатаВремя = "ДатаВремя") Экспорт
	Возврат Новый КвалификаторыДаты(ЧастиДаты[ДатаВремя]);
КонецФункции

// Квалификатор строка.
// 
// Параметры:
//  ДлинаСтроки - Число - Длина строки
// 
// Возвращаемое значение:
//  КвалификаторыСтроки - Квалификатор строка
Функция КвалификаторСтрока(ДлинаСтроки = 0) Экспорт
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки);
КонецФункции

// Квалификатор число.
// 
// Параметры:
//  ДлинаЧисла - Число - Общая длина числа
//  ТочностьЧисла - Число - Количество символов после запятой
// 
// Возвращаемое значение:
//  КвалификаторыЧисла - Квалификатор число
Функция КвалификаторЧисло(ДлинаЧисла = 15, ТочностьЧисла = 2) Экспорт
	Возврат Новый КвалификаторыЧисла(ДлинаЧисла, ТочностьЧисла);
КонецФункции

#КонецОбласти

#Область Вспомогательные_функции

// Параметры:
//  ПроверяемаяСруктура - Структура, Неопределено - Проверяемая сруктура
Процедура ЕслиСтруктураНеопределеноТоНовая(ПроверяемаяСруктура)

	Если ПроверяемаяСруктура = Неопределено Тогда
		ПроверяемаяСруктура = Новый Структура;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы, ДекорацияФормы, ТаблицаФормы, ГруппаФормы, КнопкаФормы - Элемент формы
//  Состояние - Число - Состояние растягивания по горизонтали:
//    1 - растягивать
//    2 - не растягивать
//    0 - авто
Процедура УстановитьСостояниеРастягиванияЭлементаПоГоризонтали(Элемент, Состояние)

	Если Состояние = 1 Тогда
		Элемент.РастягиватьПоГоризонтали = Истина;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.РастягиватьПоГоризонтали = Ложь;
	Иначе
		Элемент.РастягиватьПоГоризонтали = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы, ДекорацияФормы, ТаблицаФормы, ГруппаФормы, КнопкаФормы - Элемент формы
//  Состояние - Число - Состояние растягивания по вертикали:
//    1 - растягивать
//    2 - не растягивать
//    0 - авто
Процедура УстановитьСостояниеРастягиванияЭлементаПоВертикали(Элемент, Состояние)

	Если Состояние = 1 Тогда
		Элемент.РастягиватьПоВертикали = Истина;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		Элемент.РастягиватьПоВертикали = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Элемент - ФормаКлиентскогоПриложения, ГруппаФормы - Элемент формы
//  Состояние - Число - Состояние группировки в элементе:
//    1 - группировка вертикальная
//    2 - группировка горизонтальная всегда
//    3 - группировка горизонтальная, если возможно
Процедура УстановитьСостояниеГруппировкиВЭлементе(Элемент, Состояние)

	Если Состояние = 1 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИначеЕсли Состояние = 3 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Элемент - ГруппаФормы - Элемент формы
//  Состояние - Число - Состояние группировки в элементе:
//    1 - группировка вертикальная
//    2 - группировка горизонтальная
//    3 - группировка колонок в одной ячейке
Процедура УстановитьСостояниеГруппировкиКолонкиЭлемента(Элемент, Состояние)
	
	//@skip-check property-return-type
	Если Состояние = 1 Тогда
		Элемент.Группировка = ГруппировкаКолонок.Вертикальная;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.Группировка = ГруппировкаКолонок.Горизонтальная;
	ИначеЕсли Состояние = 3 Тогда
		Элемент.Группировка = ГруппировкаКолонок.ВЯчейке;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы, ДекорацияФормы, ТаблицаФормы, ГруппаФормы, КнопкаФормы - Элемент формы
//  стСвойства - Структура - структура свойств элемента, где:
//    Ключ - Строка - имя свойства элемента
//    Значение - Произвольный - значение свойства элемента
Процедура УстановитьСвойстваЭлементу(Элемент, стСвойства) Экспорт

	Для Каждого элементСтруктуры Из стСвойства Цикл
		Элемент[элементСтруктуры.Ключ] = элементСтруктуры.Значение;
	КонецЦикла;

КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы, ДекорацияФормы, ТаблицаФормы, ГруппаФормы, КнопкаФормы - Элемент формы
//  стСобытия - Структура - структура событий элемента, где:
//    Ключ - Строка - Имя события, для которого устанавливается новое действие
//    Значение - Строка - Имя обработчика
Процедура УстановитьСобытияЭлементу(Элемент, стСобытия) Экспорт

	Для Каждого элементСтруктуры Из стСобытия Цикл
		ИмяСобытия = элементСтруктуры.Ключ; // Строка - 
		Действие = элементСтруктуры.Значение; // Строка - 
		Элемент.УстановитьДействие(ИмяСобытия, Действие);
	КонецЦикла;

КонецПроцедуры

// Параметры:
//  РеквизитДинамическийСписок - ДинамическийСписок - 
//  стПараметры - Структура - Параметры запроса динамического списка, где:
//    Ключ - Строка - Имя параметра, котороый нужно установить
//    Значение - Произвольное - Значение параметра, которое нужно установить
Процедура УстановитьПараметрыЗапросаДинамическогоСписка(РеквизитДинамическийСписок, стПараметры) Экспорт

	Для Каждого элементСтруктуры Из стПараметры Цикл
		Параметр = элементСтруктуры.Ключ; // Строка - 
		Значение = элементСтруктуры.Значение; // Произвольный - 
		РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Параметр, Значение);
	КонецЦикла;

КонецПроцедуры

// Создать элемент формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ИмяЭлемента - Строка - Имя элемента
//  ТипЭлемента - Тип - Тип элемента
//  РодительЭлемента - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добовляемого элемента
//  ЭлементПеред - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Элемент перед которым должен
//  быть вставлен новый элемент
// 
// Возвращаемое значение:
//  ПолеФормы, ДекорацияФормы, ТаблицаФормы, ГруппаФормы, КнопкаФормы - Новый, созданный элемент формы
Функция СоздатьЭлементФормы(Форма, ИмяЭлемента, ТипЭлемента, РодительЭлемента, ЭлементПеред = Неопределено)

	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, ТипЭлемента, РодительЭлемента);
	Иначе
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, ТипЭлемента, РодительЭлемента, ЭлементПеред);
	КонецЕсли;

	Возврат НовыйЭлемент;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ТаблицаФормы - ТаблицаФормы - Таблица формы, в которой будут созданы новые колонки
//  стКолонки - Структура - данные добавляемых колонок, где:
//    Ключ - Строка - Имя колонки и одновременно путь к данным колонки
//    Значение - Строка - Заголовок колонки таблицы отображаемый на форме
Процедура СоздатьКолонкиТаблицыФормы(Форма, ТаблицаФормы, стКолонки)

	Для Каждого элементСтруктуры Из стКолонки Цикл
		ИмяКолонки = элементСтруктуры.Ключ; // Строка -
		ЗаголовокКолонки = элементСтруктуры.Значение; // Строка -

		НоваяКолонкаТаблицы = СоздатьЭлементФормы(Форма, ТаблицаФормы.Имя + ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
		НоваяКолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		НоваяКолонкаТаблицы.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;

		Если элементСтруктуры.Значение <> "" Тогда
			НоваяКолонкаТаблицы.Заголовок = ЗаголовокКолонки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти